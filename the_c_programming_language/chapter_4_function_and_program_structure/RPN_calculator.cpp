/**
 * 目标是编写一个具有加减乘除运算的计算器程序,
 * 为了容易实现,我们用逆波兰表示法(Reverse Polish notation，RPN，或逆波兰记法)
 * 来代替中缀表示法.
 * 逆波兰表示法中,所有运算符都在操作数的后面
 * (1-2) * (4+5)
 * 1 2 - 4 5 + *
 * 逆波兰表示法中没有括号,只要知道每个运算符需要几个操作数就不会引起歧义.
 * 实现:
 * 每个操作数都被压入栈中;一个运算符到达后,从中弹出相应项目的操作数,
 * 然后把该运算符作用于弹出的操作数,并把结果压入栈中.例如上面先把1,2压入栈,
 * 然后用两者之差-1取代他们; 然后4,5压入栈中,用9取代他们, 最后取出栈顶的-1,9,
 * 把他们的积-9压入栈顶
 *
 *
 */

int main(int argc, char const *argv[]) {
  while (/* 下一个是运算符或操作数不是EOF */) {
  if (/*是数 */) {
    /* 将数压到栈中 */
  } else if (/* 是运算符 */) {
    /* 弹出所需数目的操作数 */
  } else if(/* 是换行符*/){
    /* 弹出并打印栈顶的值 */
  }else{
    /* 出错 */
  }
}
  return 0;
}
